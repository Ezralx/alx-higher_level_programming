The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 4 and 5
    >>> add_integer(4, 5)
    9

Subtracting 10 and 9
    >>> add_integer(10, -9)
    1

Adding 98 and 2.1 
    >>> add_integer(2.1)
    100

Subtracting 7.3 and 3
	    >>> add_integer(7.3, -3)
	    4

Adding an integer number and a string
    >>> add_integer(7, "Love")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing None
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a letter and a number
    >>> add_integer('b', 3)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters
    >>> add_integer('N', 'C')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((3, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(4, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a string
    >>> add_integer("YOLO")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two float numbers
    >>> add_integer(1.1, 1.5)
    2

Subtracting 98 and 4
    >>> add_integer(-4)
    94

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer